#edit-mode: -*- python -*-
#coding:gbk

#工作路径.
WORKROOT('../../../../../')

#使用硬链接copy.
CopyUsingHardLink(True)

#支持32位/64位平台编译
#ENABLE_MULTI_LIBS(True)

#C预处理器参数.
CPPFLAGS('-D_GNU_SOURCE -D__STDC_LIMIT_MACROS -DVERSION=\\\"1.9.8.7\\\"')
#为32位目标编译指定额外的预处理参数
#CPPFLAGS_32('-D_XOPEN_SOURE=500')

#C编译参数.
CFLAGS('-g -pipe -W -fPIC')

#C++编译参数.
CXXFLAGS('-g -pipe -W -fPIC')

#IDL编译参数
IDLFLAGS('--compack')

#UBRPC编译参数
UBRPCFLAGS('--compack')

#头文件路径.
INCPATHS('. ./include ./output ./output/include ./deps/libevent/include ./deps/slb/output/include')

#使用库
LIBS('./deps/libevent/.libs/libevent.a')
LIBS('./deps/slb/output/lib/libslb.a');

TARGET('./deps/libevent/.libs/libevent.a', ShellCommands('cd ./deps/libevent/; ./configure; make'),
        CleanCommands('test -f deps/libevent/Makefile && make -C ./deps/libevent distclean || true'))
TARGET('./deps/slb/output/lib/libslb.a', ShellCommands('make -C ./deps/slb'), CleanCommands('make -C ./deps/slb clean'))


#链接参数.
LDFLAGS('-lpthread -lcrypto -lrt -ldl -rdynamic')

#依赖模块
CONFIGS('public/configure@base')
CONFIGS('public/nshead@base')

#为32位/64位指定不同的依赖路径.
#CONFIGS_32('lib2/ullib')
#CONFIGS_64('lib2-64/ullib')

user_sources='''
    dl.cpp
    event.cpp
    funcdef.cpp
    ip_whitelist.cpp
    log.cpp
    main.cpp
    mem.cpp
    meta.cpp
    pool.cpp
    connection.cpp
    req.cpp
    router.cpp
    server.cpp
    file.cpp
'''
user_headers='''
    dl.h
    event.h
    funcdef.h
    ip_whitelist.h
    log.h
    mem.h
    meta.h
    pool.h
    connection.h
    proxy.h
    req.h
    router.h
    server.h
    file.h
'''

#可执行文件
Application('proxy',Sources(user_sources))
#静态库
#StaticLibrary('proxy',Sources(user_sources),HeaderFiles(user_headers))
#共享库
#SharedLibrary('proxy',Sources(user_sources),HeaderFiles(user_headers))
#子目录
#Directory('demo')

# vim: set ft=python expandtab ts=4 sw=4 sts=4 tw=100:
