###########################################################################
# Automatically generated by comake (1.0.0)  							  #
###########################################################################

#################设计系统参数#######################################
WORKROOT	?=	../../../../../../..
IDLCC	:=	$(WORKROOT)/public/idlcompiler/output/bin/mcy
RPCCC :=  $(WORKROOT)/public/ubrpc/output/bin/ubrpcgen
CC	:=	g++
CXX	:=	g++
LEX	:=	flex
YACC	:= yacc
CFLAGS	:=	-pipe -Wall -W -g -fPIC
CXXFLAGS	:=	-pipe -Wall -W -g -fPIC
LEXFLAGS	:=	
YACCFLAGS	:=	
IDLFLAGS	:=  
LINKFLAGS	:=  -rdynamic
LINK	:=	g++
AR	:=	ar cqs
RANLIB	:=	
COMAKE	:=	comake

###############baidu lib 的32位 64位支持#################
HARDWARE_PLATFORM := $(shell uname -m)
ifeq ($(HARDWARE_PLATFORM),x86_64)
	lib2=lib2-64
	third=third-64
else
	lib2=lib2
	third=third
endif
##########################################

# 编译参数
DEP_INCPATH =  -I$(WORKROOT)/public/spreg/output//include/ -I$(WORKROOT)/public/mcpack/output//include/ -I$(WORKROOT)/public/comlog-plugin/output//include/ -I$(WORKROOT)/public/bslext/output//include/ -I$(WORKROOT)/public/connectpool/output// -I$(WORKROOT)/public/gm/galileo/output//include/ -I$(WORKROOT)/com/idlcompiler/output// -I$(WORKROOT)/public/uconv/output//include/ -I$(WORKROOT)/public/nshead/output//include/ -I$(WORKROOT)/public/ub/output//include/ -I$(WORKROOT)/$(third)/pcre//include/ -I$(WORKROOT)/$(lib2)/bsl//include/ -I$(WORKROOT)/public/configure/output//include/ -I$(WORKROOT)/$(lib2)/ullib//include/ -I$(WORKROOT)/public/idlcompiler/output//include/ -I$(WORKROOT)/inf/odp/ral/lib/super-load-balance/output//include/
DEP_LDFLAGS =  -L$(WORKROOT)/inf/odp/ral/lib/super-load-balance/output//lib/ -L$(WORKROOT)/public/gm/galileo/output//lib/ -L$(WORKROOT)/public/idlcompiler/output//lib/ -L$(WORKROOT)/public/connectpool/output// -L$(WORKROOT)/public/comlog-plugin/output//lib/ -L$(WORKROOT)/public/nshead/output// -L$(WORKROOT)/com/idlcompiler/output// -L$(WORKROOT)/public/bslext/output//lib/ -L$(WORKROOT)/$(lib2)/bsl//lib/ -L$(WORKROOT)/$(lib2)/ullib//lib/ -L$(WORKROOT)/public/mcpack/output//lib/ -L$(WORKROOT)/public/configure/output//lib/ -L$(WORKROOT)/$(third)/pcre//lib/ -L$(WORKROOT)/public/uconv/output// -L$(WORKROOT)/public/ub/output//lib/ -L$(WORKROOT)/public/spreg/output//lib/
DEP_LDLIBS = -lub -lzookeeper_mt -lgalileo -lcomlog -ldfsappender -lbsl_bml -lbsl_var_serializer -lbsl_var_scripting -lbsl_vs -lbsl_var_vscript -lbslext -lconnectpool -lconfig -lmcpack_idl -luconv -lmcpack -lspreg -lnshead -lullib -lbsl -lpcre -lpcrecpp -lpcreposix -lslb
INCPATH =  -I. -I.
MAKDEP = Makefile.dep


#start target
first : all

############# 默认推到公式
.SUFFIXES: .c .cpp .cc .cxx .C .idl .des
.PRECIOUS: %.cpp

.cpp.o:
	$(CXX) -c -o $@ $<  $(CXXFLAGS) $(CPPFLAGS) $(INCPATH)

.cc.o:
	$(CXX) -c -o $@ $<  $(CXXFLAGS) $(CPPFLAGS) $(INCPATH)

.cxx.o:
	$(CXX) -c -o $@ $<  $(CXXFLAGS) $(CPPFLAGS) $(INCPATH)

.C.o:
	$(CXX) -c -o $@ $<  $(CXXFLAGS) $(CPPFLAGS) $(INCPATH)

.c.o:
	$(CC) -c -o $@ $<  $(CFLAGS) $(CPPFLAGS) $(INCPATH)

.idl.cpp:
	$(IDLCC) --ns=$(*F) -o $* $< $(CPPFLAGS) $(INCPATH) $(IDLFLAGS)

#############
###cpp 支持
%info : %
	ccp $<
#############


#__$MAKEFILE_RULES$__



###############编译目标
all :  target output 
.PHONY : all clean test output comake src conf 

target : test1 
#target : rpcidl test1 
#target : 
#__$target_CMDLINE$__

rpcidl : 

clean_rpcidl : 


test : 


comake :
	-make clean
	-comake 

#-include $(MAKDEP)


#----------------build target : test1--------------------

test1 : CC := g++
test1 : CXX := g++
test1 : CXXFLAGS := -pipe -Wall -W -g -fPIC
test1 : CPPFLAGS := -g -Wall -W
test1 : IDLFLAGS := 
test1 : CFLAGS := -pipe -Wall -W -g -fPIC
test1 : INCPATH :=  -I. -I. $(DEP_INCPATH)
test1 : LDLIBS := -lcrypto -lm -lpthread -lpthread -lcrypto -lslb $(DEP_LDLIBS)
test1 : LDFLAGS :=  $(DEP_LDFLAGS)
test1 : LINKFLAGS := -rdynamic

test1_SOURCES := $(wildcard comake_autogen.cpp main.cpp)
#test1_HEADERS := $(wildcard *.h)
test1_HEADERS := *.h
test1_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
test1_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(test1_IDLSRC))
test1_IDLSRCH := $(patsubst %.idl,%.h, $(test1_IDLSRC))
test1_CONFDES := $(wildcard __$CONFDES$_VALUE$__ test1.des)
test1_CONFRANGE := $(patsubst %.des,%.range, $(test1_CONFDES))
test1_OBJS := $(test1_IDLSRC:.idl=.o)
test1_OBJS += $(test1_SOURCES:.c=.o)
test1_OBJS := $(test1_OBJS:.cc=.o)
test1_OBJS := $(test1_OBJS:.cpp=.o)
test1_OBJS := $(test1_OBJS:.cxx=.o)
test1_OBJS := $(test1_OBJS:.C=.o)
test1_OBJS := $(test1_OBJS:.idl=.o)
test1_OBJS := $(test1_OBJS:.yacc=.o)
test1_OBJS := $(test1_OBJS:.lex=.o)
test1 : $(test1_OBJS) 
	@echo "force_clean"
	$(foreach n, $(wildcard ), $(if ifeq($(suffix $(n)), .c), $(CC) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH);  , $(CXX) -c -o $(basename $(n)).o $(n) $(CXXFLAGS) $(CPPFLAGS) $(INCPATH); ))
	@`for x in $(test1_CONFDES);do cpp -C -o test1.range $$x $(CPPFLAGS) $(INCPATH);mkdir -p conf;cp test1.range conf/; done`
	$(LINK) $^ -o $@ -Xlinker "-(" $(LDFLAGS) $(LDLIBS) $(LINKFLAGS) -Xlinker "-)"


define test1_output
	
endef
	

define test1_clean
	-rm -rf $(test1_OBJS) $(test1_IDLSRCCPP) $(test1_IDLSRCH) test1.range conf/test1.range
	-rm -rf test1
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define test1_ccpc
	ccp $(test1_SOURCES) --formatter vim
endef
	

define test1_cov
	
endef
	



#---------------------end build target : test1------------------

define _output
	$(test1_output)
endef
	

define _clean
	$(test1_clean)
endef
	

ccpc : 
	$(test1_ccpc)

cov : 
	cov01 -1
	make clean
	make 
	cov01 -0



output : test1 
	$(_output)
	rm -rf $(MAKDEP)

$(MAKDEP) : $(wildcard comake_autogen.cpp main.cpp)
	-$(CC) -MG -MM $(CPPFLAGS) $(INCPATH) $(DEP_INCPATH) $^ > $@

clean:
	$(_clean)
	rm -rf $(MAKDEP)


