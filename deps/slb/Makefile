###########################################################################
# Automatically generated by comake (1.0.0)  							  #
###########################################################################

#################设计系统参数#######################################
WORKROOT	?=	../../../../../../../
IDLCC	:=	$(WORKROOT)/public/idlcompiler/output/bin/mcy
RPCCC :=  $(WORKROOT)/public/ubrpc/output/bin/ubrpcgen
CC	:=	g++
CXX	:=	g++
LEX	:=	flex
YACC	:= yacc
CFLAGS	:=	-pipe -Wall -W -g -fPIC
CXXFLAGS	:=	-pipe -Wall -W -g -fPIC
LEXFLAGS	:=	
YACCFLAGS	:=	
IDLFLAGS	:=  
LINKFLAGS	:=  -rdynamic
LINK	:=	g++
AR	:=	ar cqs
RANLIB	:=	
COMAKE	:=	comake

###############baidu lib 的32位 64位支持#################
HARDWARE_PLATFORM := $(shell uname -m)
ifeq ($(HARDWARE_PLATFORM),x86_64)
	lib2=lib2-64
	third=third-64
else
	lib2=lib2
	third=third
endif
##########################################

# 编译参数
DEP_INCPATH =  -I$(WORKROOT)/public/spreg/output//include/ -I$(WORKROOT)/public/mcpack/output//include/ -I$(WORKROOT)/public/comlog-plugin/output//include/ -I$(WORKROOT)/public/bslext/output//include/ -I$(WORKROOT)/public/connectpool/output// -I$(WORKROOT)/public/gm/galileo/output//include/ -I$(WORKROOT)/com/idlcompiler/output// -I$(WORKROOT)/public/uconv/output//include/ -I$(WORKROOT)/public/nshead/output//include/ -I$(WORKROOT)/public/ub/output//include/ -I$(WORKROOT)/$(third)/pcre//include/ -I$(WORKROOT)/$(lib2)/bsl//include/ -I$(WORKROOT)/public/configure/output//include/ -I$(WORKROOT)/$(lib2)/ullib//include/ -I$(WORKROOT)/public/idlcompiler/output//include/
DEP_LDFLAGS =  -L$(WORKROOT)/public/gm/galileo/output//lib/ -L$(WORKROOT)/public/idlcompiler/output//lib/ -L$(WORKROOT)/public/connectpool/output// -L$(WORKROOT)/public/comlog-plugin/output//lib/ -L$(WORKROOT)/public/nshead/output// -L$(WORKROOT)/com/idlcompiler/output// -L$(WORKROOT)/public/bslext/output//lib/ -L$(WORKROOT)/$(lib2)/bsl//lib/ -L$(WORKROOT)/$(lib2)/ullib//lib/ -L$(WORKROOT)/public/mcpack/output//lib/ -L$(WORKROOT)/public/configure/output//lib/ -L$(WORKROOT)/$(third)/pcre//lib/ -L$(WORKROOT)/public/uconv/output// -L$(WORKROOT)/public/ub/output//lib/ -L$(WORKROOT)/public/spreg/output//lib/
DEP_LDLIBS = -lub -lzookeeper_mt -lgalileo -lcomlog -ldfsappender -lbsl_bml -lbsl_var_serializer -lbsl_var_scripting -lbsl_vs -lbsl_var_vscript -lbslext -lconnectpool -lconfig -lmcpack_idl -luconv -lmcpack -lspreg -lnshead -lullib -lbsl -lpcre -lpcrecpp -lpcreposix
INCPATH =  -I. -I. -I./balance -I./strategy -I./load -I./filter -I./util -I../..
MAKDEP = Makefile.dep


#start target
first : all

############# 默认推到公式
.SUFFIXES: .c .cpp .cc .cxx .C .idl .des
.PRECIOUS: %.cpp

.cpp.o:
	$(CXX) -c -o $@ $<  $(CXXFLAGS) $(CPPFLAGS) $(INCPATH)

.cc.o:
	$(CXX) -c -o $@ $<  $(CXXFLAGS) $(CPPFLAGS) $(INCPATH)

.cxx.o:
	$(CXX) -c -o $@ $<  $(CXXFLAGS) $(CPPFLAGS) $(INCPATH)

.C.o:
	$(CXX) -c -o $@ $<  $(CXXFLAGS) $(CPPFLAGS) $(INCPATH)

.c.o:
	$(CC) -c -o $@ $<  $(CFLAGS) $(CPPFLAGS) $(INCPATH)

.idl.cpp:
	$(IDLCC) --ns=$(*F) -o $* $< $(CPPFLAGS) $(INCPATH) $(IDLFLAGS)

#############
###cpp 支持
%info : %
	ccp $<
#############


#__$MAKEFILE_RULES$__



###############编译目标
all :  target output 
.PHONY : all clean test output comake src conf 

target : libslb.a 
#target : rpcidl libslb.a 
#target : 
#__$target_CMDLINE$__

rpcidl : 

clean_rpcidl : 


test : 


comake :
	-make clean
	-comake 

#-include $(MAKDEP)


#----------------build target : libslb.a--------------------

libslb.a : CC := g++
libslb.a : CXX := g++
libslb.a : CXXFLAGS := -pipe -Wall -W -g -fPIC
libslb.a : CPPFLAGS := -g -Wall -W
libslb.a : IDLFLAGS := 
libslb.a : CFLAGS := -pipe -Wall -W -g -fPIC
libslb.a : INCPATH :=  -I. -I. -I./balance -I./strategy -I./load -I./filter -I./util -I../.. $(DEP_INCPATH)
libslb.a : LDLIBS := -lcrypto -lm -lpthread -lpthread -lcrypto $(DEP_LDLIBS)
libslb.a : LDFLAGS :=  $(DEP_LDFLAGS)
libslb.a : LINKFLAGS := -rdynamic

libslb_a_SOURCES := $(wildcard comake_autogen.cpp strategy/*.cpp balance/*.cpp load/*.cpp filter/*.cpp util/*.cpp)
#libslb_a_HEADERS := $(wildcard *.h strategy/*.h balance/*.h load/*.h filter/*.h util/*.h)
libslb_a_HEADERS := strategy/*.h balance/*.h filter/*.h util/*.h
libslb_a_IDLSRC := $(wildcard __$IDLSRC_VALUE$__)
libslb_a_IDLSRCCPP := $(patsubst %.idl,%.cpp, $(libslb_a_IDLSRC))
libslb_a_IDLSRCH := $(patsubst %.idl,%.h, $(libslb_a_IDLSRC))
libslb_a_CONFDES := $(wildcard __$CONFDES$_VALUE$__ libslb.a.des)
libslb_a_CONFRANGE := $(patsubst %.des,%.range, $(libslb_a_CONFDES))
libslb_a_OBJS := $(libslb_a_IDLSRC:.idl=.o)
libslb_a_OBJS += $(libslb_a_SOURCES:.c=.o)
libslb_a_OBJS := $(libslb_a_OBJS:.cc=.o)
libslb_a_OBJS := $(libslb_a_OBJS:.cpp=.o)
libslb_a_OBJS := $(libslb_a_OBJS:.cxx=.o)
libslb_a_OBJS := $(libslb_a_OBJS:.C=.o)
libslb_a_OBJS := $(libslb_a_OBJS:.idl=.o)
libslb_a_OBJS := $(libslb_a_OBJS:.yacc=.o)
libslb_a_OBJS := $(libslb_a_OBJS:.lex=.o)
libslb.a : $(libslb_a_OBJS) 
	rm -f $@ || echo 
	ar cr $@ $^


define libslb_a_output
	mkdir -p output
	-mkdir -p output/lib
	-cp -rf libslb.a output/lib
	-mkdir -p output/include
	-cp -rf $(libslb_a_HEADERS) output/include
	`if [ -e "conf" ];then cp -rf conf output/ ;fi`

endef
	

define libslb_a_clean
	-rm -rf $(libslb_a_OBJS) $(libslb_a_IDLSRCCPP) $(libslb_a_IDLSRCH) libslb.a.range conf/libslb.a.range
	-rm -rf libslb.a
	-rm -rf output
	-rm -rf ccp_output.error   ccp_output_scm.xml  ccp_output.xml ccp_output.pclint  ccp_output.txt
endef
	

define libslb_a_ccpc
	ccp $(libslb_a_SOURCES) --formatter vim
endef
	

define libslb_a_cov
	
endef
	



#---------------------end build target : libslb.a------------------

define _output
	$(libslb_a_output)
endef
	

define _clean
	$(libslb_a_clean)
endef
	

ccpc : 
	$(libslb_a_ccpc)

cov : 
	cov01 -1
	make clean
	make 
	cov01 -0



output : libslb.a 
	$(_output)
	rm -rf $(MAKDEP)

$(MAKDEP) : $(wildcard comake_autogen.cpp strategy/*.cpp balance/*.cpp load/*.cpp filter/*.cpp util/*.cpp ../../log.cpp)
	-$(CC) -MG -MM $(CPPFLAGS) $(INCPATH) $(DEP_INCPATH) $^ > $@

clean:
	$(_clean)
	rm -rf $(MAKDEP)


